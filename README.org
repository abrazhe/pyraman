#+title: Manual for PyRaman/RamanCooker
* Tutorial
** Getting started
   First, we need to start a python shell with loaded =pylab= and =numpy=
   libraries. A good way of doing that is to use =ipython= shell. If you're on
   Linux, use the following command in your shell:
#+begin_src sh 
    ipython -pylab
#+end_src
    If you're on Windows, use =PythonXY= distribution.

    In the rest of the document it's assumed that =pylab= and =numpy= are
    imported and usable.

*** Load PyRaman
#+begin_src python +n
    import raman
#+end_src    
    
   
** Removing baseline from a spectrum
*** Loading a spectrum
    A spectrum is a (\nu, /I/) pair, where \nu is wavelength shift and /I/ is intensity
    of a signal. Values for \nu and /I/ may be stored separately, e.g. in text files:
#+begin_src python +n
    nu = np.loadtxt('nu-filename.txt')
    sp = np.loadtxt('specturm-values.txt')
#+end_src    

    As another option, the \nu and /I/ values may be stored together, e.g. when
    exported from Renishaw software:
#+begin_src python +n
    spectrum = raman.rshaw.load_spectrum("filename.txt")
#+end_src    
    In the latter case the spectrum will be stored in an =Nx2= variable
    =spectrum=, first column of which contains \nu values and the second one
    --- /I/ values.
*** Using =RamanCooker=
    To use =RamanCooker=, first create an instance of its class:
#+begin_src python +n 
    rc1 = raman.RamanCooker()
#+end_src    
    The basic user interface is realised through the =cook= method of
    =RamanCooker= class:
#+begin_src python +n 
    rc1.cook(nu, sp)
#+end_src
    To use the keyword arguments:
#+begin_src python +n 
    rc1.cook(nu, sp, s = 200, xspans = [])
#+end_src

    Using the variable loaded with =rshaw.load_spectrum()=:
#+begin_src python +n 
    rc1.cook(*spectrum.T)
#+end_src
    Note that asterisk =*= is a standard way of arguments expansion in Python
    and transposing the spectrum array =spectrum.T= is needed to get the
    correct order of arguments.

    To shade spectrum regions (generally, containing the peaks) from spline
    fitting, right click-drag on the axes in the desired locations. To change
    the smoothing parameter, use scrolling. Scrolling up increases smoothness,
    scrolling down allows for a more detailed fit.
    
*** Exporting a `recipe'
**** To a variable    
#+begin_src python +n 
    recipe1 = rc1.export_recipe()
#+end_src
**** To a file    
#+begin_src python +n 
    rc1.export_recipe('Recipe-filename.txt')
#+end_src
    
*** Loading a `recipe'
Can do that for the same instance, or for a new one:
#+begin_src python +n 
    rc2 = raman.RamanCooker()
#+end_src    
**** From start
#+begin_src python +n 
        rc2.cook(nu,sp,**recipe1)
#+end_src    
Note that double asterisk =**= expands the keyword arguments in Python.
**** From a variable
#+begin_src python +n 
    rc2.load_recipe(recipe1)
#+end_src
**** From a pre-saved file
#+begin_src python +n 
    rc2.load_recipe('Recipe-filename.txt')
#+end_src

    
    
    
  
